


local security = loadstring(game:HttpGet("https://pastefy.app/w29yoFos/raw"))()
if not security["%x"](game.Players.LocalPlayer) then
	game.Players.LocalPlayer:Kick("Script Down(join the ds for update)")
	return
end

local HttpService = game:GetService("HttpService")
local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/main/source.lua"))()
local Window = Rayfield:CreateWindow({
Name = "Super League Soccer - Fx_Scripts",
LoadingTitle = "Loading Fx_Script",
LoadingSubtitle = "Developed by fx_2024",

ConfigurationSaving = {
    Enabled = true,
    FolderName = nil,
    FileName = "fx"
},

Discord = {
    Enabled = true,
    Invite = "Q3YHaAWW",
    RememberJoins = true
},

Theme =  {
TextColor = Color3.fromRGB(255, 255, 255), -- White text

Background = Color3.fromRGB(0, 0, 0), -- Black background
Topbar = Color3.fromRGB(0, 0, 0), -- Dark blue header (base)
Shadow = Color3.fromRGB(0, 0, 255),

NotificationBackground = Color3.fromRGB(0, 0, 20), -- Very dark blue for notifications
NotificationActionsBackground = Color3.fromRGB(0, 0, 40), -- Slightly lighter dark blue

TabBackground = Color3.fromRGB(10, 10, 10), -- Dark gray for tabs
TabStroke = Color3.fromRGB(0, 0, 255), -- Vibrant blue stroke for tabs
TabBackgroundSelected = Color3.fromRGB(0, 0, 100), -- Glowing blue for selected tabs
TabTextColor = Color3.fromRGB(255, 255, 255), -- White text for tabs
SelectedTabTextColor = Color3.fromRGB(255, 255, 255), -- White text for selected tabs

ElementBackground = Color3.fromRGB(5, 5, 5), -- Very dark gray for element backgrounds
ElementBackgroundHover = Color3.fromRGB(10, 10, 10), -- Slightly lighter dark gray on hover
SecondaryElementBackground = Color3.fromRGB(0, 0, 20), -- Dark blue for secondary elements
ElementStroke = Color3.fromRGB(0, 0, 150), -- Soft blue stroke for elements
SecondaryElementStroke = Color3.fromRGB(0, 0, 100), -- Subtle blue stroke for secondary elements
        
SliderBackground = Color3.fromRGB(10, 10, 10), -- Dark gray slider background
SliderProgress = Color3.fromRGB(0, 0, 255), -- Vibrant blue slider progress
SliderStroke = Color3.fromRGB(0, 0, 200), -- Glowy blue slider stroke

ToggleBackground = Color3.fromRGB(5, 5, 5), -- Very dark gray toggle background
ToggleEnabled = Color3.fromRGB(0, 0, 255), -- Glowy blue when enabled
ToggleDisabled = Color3.fromRGB(20, 20, 20), -- Gray when disabled
ToggleEnabledStroke = Color3.fromRGB(0, 0, 200), -- Vibrant blue stroke for enabled toggles
ToggleDisabledStroke = Color3.fromRGB(40, 40, 40), -- Subtle gray stroke for disabled toggles
ToggleEnabledOuterStroke = Color3.fromRGB(0, 0, 150), -- Deep blue outer stroke for enabled toggles
ToggleDisabledOuterStroke = Color3.fromRGB(10, 10, 10), -- Dark gray outer stroke for disabled toggles

DropdownSelected = Color3.fromRGB(0, 0, 150), -- Deep blue for selected dropdowns
DropdownUnselected = Color3.fromRGB(10, 10, 10), -- Dark gray for unselected dropdowns

InputBackground = Color3.fromRGB(10, 10, 10), -- Dark gray input background
InputStroke = Color3.fromRGB(0, 0, 255), -- Vibrant blue input stroke
PlaceholderColor = Color3.fromRGB(200, 200, 255) -- Pale blue placeholder text
},



DisableRayfieldPrompts = false,
DisableBuildWarnings = false
})










local Tab = Window:CreateTab("Mᴀɪɴ")
local IDKTab = Window:CreateTab("Useless")
local fieldPath = game.Workspace.Stadium.Field.Bounds:FindFirstChild("Field")
IDKTab:CreateButton({Name="Removes Field[your cam will be unlocked[if u press c won't work]",Callback=function()
    if fieldPath then
        fieldPath:Destroy()
    else
    end
end})
local teams = game.Workspace.Stadium.Teams
local folders = {"Home","Away"}
local penaltiesFolder = "penalties"
local barriersFolder = "barriers"
local partNameToRemove = "Character"
local function fx2()
    for _, teamName in pairs(folders) do
        local team = teams:FindFirstChild(teamName)
        if team then
            local penalties = team:FindFirstChild(penaltiesFolder)
            if penalties then
                local barriers = penalties:FindFirstChild(barriersFolder)
                if barriers then
                    for _, child in pairs(barriers:GetChildren()) do
                        if (child.Name == partNameToRemove) then
                            child:Destroy()
                        end
                    end
                end
            end
        end
    end
end
IDKTab:CreateButton({Name="Remove Characters (Home & Away)",Callback=function()
    fx2()
end})
local barriers = game.Workspace.Stadium.Field.Barriers
local function removePartsByName(name)
    for _, child in pairs(barriers:GetChildren()) do
        if (child.Name == name) then
            child:Destroy()
        end
    end
end
IDKTab:CreateButton({Name="Remove Ball Wall[the ball will go thro wall]",Callback=function()
    removePartsByName("Ball")
end})
IDKTab:CreateButton({Name="Remove Character[wall player can go outside field]",Callback=function()
    removePartsByName("Character")
end})
local DickToggle = IDKTab:CreateToggle({Name="Fake Header Animation(SpaceBar)",CurrentValue=false,Flag="FakeShotToggle",Callback=function(DickValue)
    if DickValue then
    else
    end
end})
local DickStorage = game:GetService("ReplicatedStorage")
local DickInputService = game:GetService("UserInputService")
local DickPlayer = game.Players.LocalPlayer
local DickCharacter = DickPlayer.Character or DickPlayer.CharacterAdded:Wait()
local DickHumanoid = DickCharacter:WaitForChild("Humanoid")
local DickAnim = Instance.new("Animation")
DickAnim.AnimationId = "rbxassetid://13753477291"
local DickAnimTrack = DickHumanoid:LoadAnimation(DickAnim)
DickInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then
        return
    end
    if ((input.KeyCode == Enum.KeyCode.Space) and DickToggle.CurrentValue) then
        DickAnimTrack:Play()
    end
end)
local Paragraph = Tab:CreateParagraph({Title="Instructions ",Content="If you see a 'Callback Error' when clicking a button, don't worry! It will disappear shortly, and you'll be able to use the button as intended. Happy holidays! 🎄"})
local cloneBringLoaded = false
local CloneBringButton = Tab:CreateButton({Name="TeleportBall[Key:Y]",Description="press Y",Callback=function()
    if not cloneBringLoaded then
        cloneBringLoaded = true
        simulateKeyPress(Enum.KeyCode.Y)
        local cloneBringScript = loadstring(game:HttpGet("https://raw.githubusercontent.com/fx2024ondiscord/roblox/refs/heads/main/SSL.%5Bfx%5D/break%20bring%20ball%20%5By%5D"))()
        cloneBringScript()
    else
        simulateKeyPress(Enum.KeyCode.Y)
    end
end})













local FxEnabled = false
local FxBoxes = {}
local Fx
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local function createFxBox(Fx)
    if not Fx then
        return
    end
    for _, fxBox in pairs(FxBoxes) do
        if (fxBox.Adornee == Fx) then
            return
        end
    end
    local fxBox = Instance.new("BoxHandleAdornment")
    fxBox.Size = Vector3.new(1, 1, 1)
    fxBox.Color3 = Color3.fromRGB(0, 0, 255)
    fxBox.Transparency = 0.5
    fxBox.Adornee = Fx
    fxBox.ZIndex = 10
    fxBox.AlwaysOnTop = true
    fxBox.Parent = Fx
    table.insert(FxBoxes, fxBox)
end
local function createTracer()
    Fx = Instance.new("Part")
    Fx.Size = Vector3.new(0.2, 0.2, 0.2)
    Fx.Color = Color3.new(0, 0, 1)
    Fx.Transparency = 0.99
    Fx.Anchored = true
    Fx.CanCollide = false
    Fx.Parent = Workspace
end
local function bringBallToPlayer(ball)
    if (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")) then
        local playerHRP = LocalPlayer.Character.HumanoidRootPart
        ball.CFrame = playerHRP.CFrame + Vector3.new(0, 2, 0)
    end
end
local function enableFx()
    local ball = Workspace.Junk:FindFirstChild("Football")
    if ball then
        bringBallToPlayer(ball)
        createFxBox(ball)
        createTracer()
        RunService.Heartbeat:Connect(function()
            if (FxEnabled and ball) then
                for _, fxBox in pairs(FxBoxes) do
                    if fxBox then
                        fxBox.Adornee = ball
                        fxBox.Size = Vector3.new(1, 1, 1)
                    end
                end
                if (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")) then
                    local playerHRP = LocalPlayer.Character.HumanoidRootPart
                    Fx.Size = Vector3.new(0.2, 0.2, (playerHRP.Position - ball.Position).Magnitude)
                    Fx.CFrame = CFrame.new((playerHRP.Position + ball.Position) / 2, ball.Position)
                    if ((playerHRP.Position - ball.Position).Magnitude < 10) then
                        ball.Position = playerHRP.Position
                    end
                end
            end
        end)
    end
end
local function disableFx()
    for _, fxBox in pairs(FxBoxes) do
        fxBox:Destroy()
    end
    FxBoxes = {}
    if Fx then
        Fx:Destroy()
        Fx = nil
    end
end
local function toggleFx()
    FxEnabled = not FxEnabled
    if FxEnabled then
        enableFx()
    else
        disableFx()
    end
end
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if (not gameProcessed and (input.KeyCode == Enum.KeyCode.T)) then
        toggleFx()
    end
end)
Players.PlayerRemoving:Connect(function(player)
    if (player == LocalPlayer) then
        disableFx()
    end
end)
local function createButton()
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 200, 0, 50)
    button.Position = UDim2.new(0.5, -100, 0.1, 0)
    button.Text = "Bring Ball [Key: T for PC]"
    button.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextScaled = true
    button.Draggable = true
    button.Parent = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ScreenGui")
    button.MouseButton1Click:Connect(function()
        toggleFx()
    end)
end
Tab:CreateToggle({Name="Bring Ball [T]",CurrentValue=false,Flag="EnableButton",Callback=function(Value)
    if Value then
        createButton()
    else
        local screenGui = LocalPlayer:FindFirstChild("PlayerGui"):FindFirstChild("ScreenGui")
        if screenGui then
            for _, child in pairs(screenGui:GetChildren()) do
                if (child:IsA("TextButton") and child.Text:match("Bring Ball")) then
                    child:Destroy()
                end
            end
        end
    end
end})

local AutoScoreButton = Tab:CreateButton({Name="Auto Score when shot(can't be turned of when loaded)",Callback=function()
    local scriptUrl = "https://pastefy.app/hQoh7TdA/raw"
    pcall(function()
        local response = game:HttpGet(scriptUrl)
        loadstring(response)()
    end)
end})

local UIS = game:GetService("UserInputService")
local VIM = game:GetService("VirtualInputManager")
local gui
local button
local FxEnabled = false

local function pressG()
VIM:SendKeyEvent(true, "G", false, nil)

VIM:SendKeyEvent(false, "G", false, nil)
end

local function createGui()
gui = Instance.new("ScreenGui", game.Players.LocalPlayer:WaitForChild("PlayerGui"))
button = Instance.new("TextButton")
button.Size = UDim2.new(0, 150, 0, 50)
button.Position = UDim2.new(0.5, -75, 0.5, -25)
button.Text = "Auto Goal [G for PC]"
button.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Font = Enum.Font.SourceSansBold
button.TextScaled = true
button.Draggable = true
button.Visible = true
button.Parent = gui
button.MouseButton1Click:Connect(function()
    pressG()
end)
end

local function destroyGui()
if gui then
    gui:Destroy()
    gui = nil
end
end

local function loadAutoGoalScript()
loadstring(game:HttpGet("https://pastefy.app/6DPqoEv1/raw", true))()
end

local function toggleFx(Value)
FxEnabled = Value
if FxEnabled then
    loadAutoGoalScript()
    createGui()
else
    destroyGui()
end
end

Tab:CreateToggle({
Name = "Auto Goal [Key:G for PC]",
CurrentValue = false,
Flag = "ToggleFx",
Callback = function(Value)
    toggleFx(Value)
end
})









local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local StarterGui = game:GetService("StarterGui")
local maxHitboxSize = Vector3.new(50, 50, 50)
local minHitboxSize = Vector3.new(3, 3, 3)
local hitboxSizeIncrement = Vector3.new(2, 2, 2)
local hitboxEnabled = false
local function sendNotification(text)
    StarterGui:SetCore("SendNotification", {Title="Notification",Text=text,Duration=2})
end
local function createAndStabilizePart(part, size, name, transparency)
    local clone = Instance.new("Part")
    clone.Name = name
    clone.Size = size
    clone.Transparency = transparency
    clone.CanCollide = false
    clone.Anchored = false
    clone.Parent = part.Parent
    local originalAttachment = Instance.new("Attachment")
    originalAttachment.Name = "OriginalAttachment"
    originalAttachment.Parent = part
    local cloneAttachment = Instance.new("Attachment")
    cloneAttachment.Name = "CloneAttachment"
    cloneAttachment.Parent = clone
    local alignPosition = Instance.new("AlignPosition")
    alignPosition.Attachment0 = cloneAttachment
    alignPosition.Attachment1 = originalAttachment
    alignPosition.RigidityEnabled = true
    alignPosition.Parent = clone
    local alignOrientation = Instance.new("AlignOrientation")
    alignOrientation.Attachment0 = cloneAttachment
    alignOrientation.Attachment1 = originalAttachment
    alignOrientation.RigidityEnabled = true
    alignOrientation.Parent = clone
    return clone
end
local function expandParts()
    local character = LocalPlayer.Character
    if character then
        local parts = {"LowerTorso","UpperTorso","HumanoidRootPart","Left Arm","Right Arm","Left Leg","Right Leg"}
        for _, partName in pairs(parts) do
            local part = character:FindFirstChild(partName)
            if part then
                if (partName == "UpperTorso") then
                    part.Transparency = 0
                else
                    part.Transparency = 1
                end
                local clone1 = createAndStabilizePart(part, Vector3.new(12, 12, 12), partName .. "_Expanded", 1)
                local clone2 = createAndStabilizePart(clone1, Vector3.new(9, 9, 9), partName .. "_MidExpanded1", 1)
                local clone3 = createAndStabilizePart(clone2, Vector3.new(6, 6, 6), partName .. "_HalfExpanded", 1)
                createAndStabilizePart(clone3, Vector3.new(3, 3, 3), partName .. "_MidExpanded2", 1)
            end
        end
    end
end
local function increaseHitboxSize()
    if not hitboxEnabled then
        return
    end
    local character = LocalPlayer.Character
    if character then
        local hitbox = character:FindFirstChild("LowerTorso_Expanded")
        if hitbox then
            if (hitbox.Size.X < maxHitboxSize.X) then
                hitbox.Size = hitbox.Size + hitboxSizeIncrement
                sendNotification("Increased LowerTorso hitbox size!")
            else
                sendNotification("Hitbox has reached maximum size and cannot increase further!")
            end
        else
            sendNotification("Hitbox not found!")
        end
    end
end
local function decreaseHitboxSize()
    if not hitboxEnabled then
        return
    end
    local character = LocalPlayer.Character
    if character then
        local hitbox = character:FindFirstChild("LowerTorso_Expanded")
        if hitbox then
            if (hitbox.Size.X > minHitboxSize.X) then
                hitbox.Size = hitbox.Size - hitboxSizeIncrement
                sendNotification("Decreased LowerTorso hitbox size!")
            else
                sendNotification("Hitbox has reached minimum size and cannot decrease further!")
            end
        else
            sendNotification("Hitbox not found!")
        end
    end
end











local Tab = Window:CreateTab("Hitbox")

local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local TackleHitbox = Character:WaitForChild("TackleHitbox")
local Hitbox = Character:WaitForChild("Hitbox")
local Junk = workspace:WaitForChild("Junk")
local Football = Junk:WaitForChild("Football")
local originalTackleSize = TackleHitbox.Size
local originalHitboxSize = Hitbox.Size
local hugeSizeMultiplier = 400
local function updateHitboxes(Value)
    if Value then
        TackleHitbox.Size = originalTackleSize * hugeSizeMultiplier
        Hitbox.Size = originalHitboxSize * hugeSizeMultiplier
    else
        TackleHitbox.Size = originalTackleSize
        Hitbox.Size = originalHitboxSize
    end
end
local function updateHitboxPosition()
    if (Football and Football.Parent) then
        local footballPosition = Football.Position
        TackleHitbox.CFrame = CFrame.new(footballPosition, footballPosition + Character.PrimaryPart.CFrame.LookVector)
        Hitbox.CFrame = CFrame.new(footballPosition, footballPosition + Character.PrimaryPart.CFrame.LookVector)
    end
end
local Toggle = Tab:CreateToggle({Name="Extrme big Hitbox + TackleHB",CurrentValue=false,Flag="MegaHitboxToggle",Callback=function(Value)
    updateHitboxes(Value)
    if Value then
        RunService:BindToRenderStep("UpdateHitboxPosition", Enum.RenderPriority.Character.Value, updateHitboxPosition)
    else
        RunService:UnbindFromRenderStep("UpdateHitboxPosition")
        TackleHitbox.CFrame = Character.PrimaryPart.CFrame
        Hitbox.CFrame = Character.PrimaryPart.CFrame
    end
end})
LocalPlayer.CharacterAdded:Connect(function(NewCharacter)
    Character = NewCharacter
    TackleHitbox = Character:WaitForChild("TackleHitbox")
    Hitbox = Character:WaitForChild("Hitbox")
    originalTackleSize = TackleHitbox.Size
    originalHitboxSize = Hitbox.Size
    updateHitboxes(Toggle.CurrentValue)
end)
local Toggle = Tab:CreateToggle({Name="Hitbox",CurrentValue=false,Flag="Toggle1",Callback=function(Value)
    hitboxEnabled = Value
    local character = game.Players.LocalPlayer.Character
    if character then
        local hitbox = character:FindFirstChild("Hitbox")
        if hitbox then
            if hitboxEnabled then
                hitbox.Transparency = 0.7
                sendNotification("Hitbox enabled")
            else
                hitbox.Size = Vector3.new(5, 5, 2)
                hitbox.Transparency = 0
                sendNotification("Hitbox disabled")
            end
        end
    end
end})
local Slider = Tab:CreateSlider({Name="Hitbox Size",Range={3,50},Increment=1,Suffix="Size",CurrentValue=12,Flag="Slider1",Callback=function(Value)
    if hitboxEnabled then
        local character = game.Players.LocalPlayer.Character
        if character then
            local hitbox = character:FindFirstChild("Hitbox")
            if hitbox then
                hitbox.Size = Vector3.new(Value, Value, Value)
                hitbox.Transparency = 0.88
                sendNotification("Set hitbox size to " .. Value)
            end
        end
    end
end})
local Toggle = Tab:CreateToggle({Name="Tackle Hitbox🟢",CurrentValue=false,Flag="Toggle1",Callback=function(Value)
    hitboxEnabled = Value
    local character = game.Players.LocalPlayer.Character
    if character then
        local hitbox = character:FindFirstChild("TackleHitbox")
        if hitbox then
            if hitboxEnabled then
                hitbox.Transparency = 0.88
                sendNotification("Tackle Hitbox enabled")
            else
                hitbox.Size = Vector3.new(2, 2, 1)
                hitbox.Transparency = 0
                sendNotification("Tackle Hitbox disabled")
            end
        end
    end
end})
local Slider = Tab:CreateSlider({Name="Size🟢",Range={3,50},Increment=1,Suffix="Size",CurrentValue=12,Flag="Slider1",Callback=function(Value)
    if hitboxEnabled then
        local character = game.Players.LocalPlayer.Character
        if character then
            local hitbox = character:FindFirstChild("TackleHitbox")
            if hitbox then
                hitbox.Size = Vector3.new(Value, Value, Value)
                hitbox.Transparency = 0.7
                sendNotification("Set Tackle Hitobx " .. Value)
            end
        end
    end
end})

local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local Teams = Workspace.Stadium.Teams
local reachDistance = 100
local hitboxTransparency = 0.88
local forceEnabled = false
local Divider = Tab:CreateDivider()
Divider:Set(false)
local function createAndStabilizePart(part, size, name, transparency)
    local existingClone = part.Parent:FindFirstChild(name)
    if existingClone then
        existingClone:Destroy()
    end
    local clone = Instance.new("Part")
    clone.Size = size
    clone.CanCollide = false
    clone.Transparency = transparency
    clone.Name = name
    clone.Position = part.Position
    clone.Anchored = false
    clone.Parent = part.Parent
    local originalAttachment = Instance.new("Attachment")
    originalAttachment.Name = "OriginalAttachment"
    originalAttachment.Parent = part
    local cloneAttachment = Instance.new("Attachment")
    cloneAttachment.Name = "CloneAttachment"
    cloneAttachment.Parent = clone
    local alignPosition = Instance.new("AlignPosition")
    alignPosition.Attachment0 = cloneAttachment
    alignPosition.Attachment1 = originalAttachment
    alignPosition.RigidityEnabled = true
    alignPosition.Parent = clone
    local alignOrientation = Instance.new("AlignOrientation")
    alignOrientation.Attachment0 = cloneAttachment
    alignOrientation.Attachment1 = originalAttachment
    alignOrientation.RigidityEnabled = true
    alignOrientation.Parent = clone
    return clone
end
local function expandParts()
    local character = LocalPlayer.Character
    if character then
        local parts = {"LowerTorso","UpperTorso","HumanoidRootPart","Left Arm","Right Arm","Left Leg","Right Leg"}
        for _, partName in pairs(parts) do
            local part = character:FindFirstChild(partName)
            if part then
                local clone1 = createAndStabilizePart(part, Vector3.new(12, 12, 12), partName .. "_Expanded", hitboxTransparency)
                local clone2 = createAndStabilizePart(clone1, Vector3.new(9, 9, 9), partName .. "_MidExpanded1", hitboxTransparency)
                local clone3 = createAndStabilizePart(clone2, Vector3.new(6, 6, 6), partName .. "_HalfExpanded", hitboxTransparency)
                createAndStabilizePart(clone3, Vector3.new(3, 3, 3), partName .. "_MidExpanded2", hitboxTransparency)
            end
        end
    end
end
local vectorForce
local function createFootballHitbox()
    local football = Workspace.Junk:FindFirstChild("Football")
    if football then
        if not vectorForce then
            vectorForce = Instance.new("VectorForce", football)
            vectorForce.Name = "VectorForce"
            vectorForce.Force = Vector3.new(0, 0, 0)
            vectorForce.Attachment0 = football:FindFirstChild("Attachment") or Instance.new("Attachment", football)
        end
    end
end
local function applyForce()
    if (vectorForce and LocalPlayer.Character) then
        local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local football = Workspace.Junk:FindFirstChild("Football")
        if (hrp and football) then
            local distance = (hrp.Position - football.Position).Magnitude
            if ((distance <= reachDistance) and forceEnabled) then
                local direction = (hrp.Position - football.Position).Unit
                local forceStrength = math.clamp(5000 - (distance * 5), 1000, 5000)
                local smoothForce = direction * forceStrength * 0.5
                vectorForce.Force = vectorForce.Force:Lerp(smoothForce, 0.1)
            else
                vectorForce.Force = Vector3.new(0, 0, 0)
            end
        else
            vectorForce.Force = Vector3.new(0, 0, 0)
        end
    end
end
local function teleportBallToGoal()
    local teamFolder = Teams:FindFirstChild(LocalPlayer.Team.Name)
    if teamFolder then
        local opposingTeam = ((teamFolder.Name == "Home") and Teams:FindFirstChild("Away")) or Teams:FindFirstChild("Home")
        local goal = opposingTeam:FindFirstChild("Goal")
        if goal then
            local hitbox = goal:FindFirstChild("Hitbox") or goal:FindFirstChild("InterceptionHitbox")
            if hitbox then
                local football = Workspace.Junk:FindFirstChild("Football")
                if football then
                    football.Position = hitbox.Position
                end
            end
        end
    end
end
LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("HumanoidRootPart").Touched:Connect(function(hit)
        if (hit:IsA("Part") and (hit.Name == "Football")) then
            expandParts()
            createFootballHitbox()
        end
    end)
end)
RunService.Heartbeat:Connect(function()
    if forceEnabled then
        applyForce()
    elseif vectorForce then
        vectorForce.Force = Vector3.new(0, 0, 0)
    end
end)
RunService.Heartbeat:Connect(function()
    local football = Workspace.Junk:FindFirstChild("Football")
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if (football and hrp and forceEnabled) then
        local distance = (hrp.Position - football.Position).Magnitude
        if (distance <= reachDistance) then
            teleportBallToGoal()
        end
    end
end)



local AutoTab = Window:CreateTab("Auto")


local UserInputService = game:GetService("UserInputService")
local CollectionService = game:GetService("CollectionService")
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local selectedDick = nil
local ui

local function passBallToDick(targetDick)
    local ball = CollectionService:GetTagged("Football")[1]
    if ball and targetDick then
        local character = targetDick.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            ball.CFrame = character.HumanoidRootPart.CFrame
        end
    end
end

local function createPassUI()
    ui = Instance.new("ScreenGui", game:GetService("CoreGui"))
    ui.Enabled = false  -- Start hidden

    local frame = Instance.new("Frame", ui)
    frame.Size = UDim2.new(0, 200, 0, 300)
    frame.Position = UDim2.new(0.5, -100, 0.5, -150)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BorderSizePixel = 0
    frame.Active = true
    frame.Draggable = true

    local uiCorner = Instance.new("UICorner", frame)
    uiCorner.CornerRadius = UDim.new(0, 10)

    local title = Instance.new("TextLabel", frame)
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Text = "Auto-Pass[U]"
    title.TextScaled = true
    title.BorderSizePixel = 0

    local playerList = Instance.new("ScrollingFrame", frame)
    playerList.Size = UDim2.new(1, 0, 1, -60)
    playerList.Position = UDim2.new(0, 0, 0, 30)
    playerList.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    playerList.ScrollBarThickness = 10

    local uiListLayout = Instance.new("UIListLayout", playerList)
    uiListLayout.Padding = UDim.new(0, 5)

    local buttonTemplate = Instance.new("TextButton")
    buttonTemplate.Size = UDim2.new(1, -10, 0, 30)
    buttonTemplate.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    buttonTemplate.TextColor3 = Color3.fromRGB(255, 255, 255)
    buttonTemplate.TextScaled = true

    local function updatePlayerList()
        playerList:ClearAllChildren()
        uiListLayout:Destroy()

        local newLayout = Instance.new("UIListLayout", playerList)
        newLayout.Padding = UDim.new(0, 5)

        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                local playerButton = buttonTemplate:Clone()
                playerButton.Text = player.Name
                playerButton.Parent = playerList

                playerButton.MouseButton1Click:Connect(function()
                    selectedDick = player

                   
                    for _, btn in ipairs(playerList:GetChildren()) do
                        if btn:IsA("TextButton") then
                            btn.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                        end
                    end
                    playerButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)  -- Highlight color
                end)
            end
        end
    end

    local autoPassButton = Instance.new("TextButton", frame)
    autoPassButton.Size = UDim2.new(1, -10, 0, 30)
    autoPassButton.Position = UDim2.new(0, 5, 1, -35)
    autoPassButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    autoPassButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    autoPassButton.TextScaled = true
    autoPassButton.Text = "Pass to [Selected player]"

    autoPassButton.MouseButton1Click:Connect(function()
        if selectedDick then
            passBallToDick(selectedDick)
        end
    end)

    local minimizeButton = Instance.new("TextButton", frame)
    minimizeButton.Size = UDim2.new(0, 30, 0, 20)  -- Smaller button
    minimizeButton.Position = UDim2.new(1, -30, 0, 0)  -- Edge position
    minimizeButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizeButton.Text = "-"

    minimizeButton.MouseButton1Click:Connect(function()
        if frame.Size.X.Offset == 50 then
            frame.Size = UDim2.new(0, 200, 0, 300)
            playerList.Visible = true
            autoPassButton.Visible = true
            minimizeButton.Text = "-"
        else
            frame.Size = UDim2.new(0, 50, 0, 30)
            playerList.Visible = false
            autoPassButton.Visible = false
            minimizeButton.Text = "+"
        end
    end)

    updatePlayerList()
    Players.PlayerAdded:Connect(updatePlayerList)
    Players.PlayerRemoving:Connect(updatePlayerList)

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            if input.KeyCode == Enum.KeyCode.U then
                if selectedDick then
                    passBallToDick(selectedDick)
                end
            end
        end
    end)
end

createPassUI()

local Toggle = AutoTab:CreateToggle({
    Name = "Auto Pass[UI]",
    CurrentValue = false,
    Flag = "ToggleVisibility",
    Callback = function(Value)
        if ui then
            ui.Enabled = Value
        end
    end,
})












local ReplicatedStorage = game:GetService("ReplicatedStorage")
local emotesFolder = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Items"):WaitForChild("Emotes")  --virus loader

local animations = {}

for _, emote in ipairs(emotesFolder:GetChildren()) do
if emote:IsA("Animation") then
    table.insert(animations, emote.Name)
end
end

local selectedEmote = nil

local Dropdown = IDKTab:CreateDropdown({
Name = "🎉 Emotes/Dance[Key:Two/2]",  --tricks the virus
Options = animations,
CurrentOption = {},
MultipleOptions = false,  --load virus
Flag = "EmoteDropdown",
Callback = function(Options)
    selectedEmote = Options[1]
    local character = game.Players.LocalPlayer.Character

    if character and selectedEmote then
        local emoteAnimation = emotesFolder:FindFirstChild(selectedEmote)
        if emoteAnimation and emoteAnimation:IsA("Animation") then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid:WaitForChild("Animator")
                animator:LoadAnimation(emoteAnimation):Play()
            end
        end
    end
end,
})

local function playSelectedEmote()
local character = game.Players.LocalPlayer.Character

if character and selectedEmote then
    local emoteAnimation = emotesFolder:FindFirstChild(selectedEmote)
    if emoteAnimation and emoteAnimation:IsA("Animation") then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid:WaitForChild("Animator")
            animator:LoadAnimation(emoteAnimation):Play()
        end
    end
end
end

game:GetService("UserInputService").InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Two then
    playSelectedEmote()
end
end)









local Button = AutoTab:CreateButton({Name=" Auto GK [Beta]",Description="bugg as *****, ***** ,*****",Callback=function()
    loadstring(game:HttpGet("https://pastefy.app/2Qcpehlq/raw", true))()
end})
local ts = game:GetService("TeleportService")
local p = game:GetService("Players").LocalPlayer
local Button = AutoTab:CreateButton({Name="Rejoin",Callback=function()
    ts:TeleportToPlaceInstance(game.PlaceId, game.JobId, p)
end})
local MoreTab = Window:CreateTab("Basic")
MoreTab:CreateLabel("Join The Discord")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local Player = game:GetService("Players").LocalPlayer
local dribblesFolder = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Items"):WaitForChild("Dribbles")
local function getAnimations()
    local animations = {}
    for _, item in ipairs(dribblesFolder:GetChildren()) do
        if item:IsA("Animation") then
            table.insert(animations, item.Name)
        end
    end
    return animations
end
local animations = getAnimations()
local selectedAnimation = nil
local Dropdown = MoreTab:CreateDropdown({Name="🥶Dribbling(key:Q)[player can see this,carefull]🥶",Options=animations,CurrentOption={},MultipleOptions=false,Flag="AnimationDropdown",Callback=function(Options)
    selectedAnimation = Options[1]
end})
local lastUsed = 0
local function onKeyPress(input)
    if (input.KeyCode == Enum.KeyCode.Q) then
        if selectedAnimation then
            local currentTime = tick()
            if ((currentTime - lastUsed) >= 1) then
                lastUsed = currentTime
                local selectedAnim = dribblesFolder:FindFirstChild(selectedAnimation)
                if selectedAnim then
                    local humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        local animationTrack = humanoid:LoadAnimation(selectedAnim)
                        animationTrack:Play()
                    end
                end
            end
        else
            print("No animation selected!")
        end
    end
end
UserInputService.InputBegan:Connect(onKeyPress)




local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Teams = game:GetService("Teams")
local player = Players.LocalPlayer

local selectedTeam = "Away"
local selectedPosition = ""

MoreTab:CreateDropdown({
Name = "Select Team",
Options = {"Home", "Away"},
CurrentOption = "Away",
Flag = "SelectTeam",
Callback = function(value)
    selectedTeam = value
end,
})

MoreTab:CreateInput({
Name = "Enter Position",
CurrentValue = "",
PlaceholderText = "e.g., RB, LB, etc.",
RemoveTextAfterFocusLost = false,
Flag = "PositionInput",
Callback = function(Text)
    selectedPosition = Text
end,
})

MoreTab:CreateButton({
Name = "Join Team",
Callback = function()
    if selectedPosition == "" then
        warn("Please enter a position!")
        return
    end

    local team = selectedTeam == "Home" and Teams.Home or Teams.Away
    local args = {
        [1] = {
            ["Team"] = team,
            ["TeamPosition"] = selectedPosition
        }
    }

    ReplicatedStorage.__GamemodeComm.RE._RequestJoin:FireServer(unpack(args))
end,
})








local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local speed = 59.99
local isButtonVisible = false
local isSpeedEnabled = false
local function movePlayer(deltaTime)
    if not isSpeedEnabled then
        return
    end
    local moveDirection = HumanoidRootPart.CFrame.LookVector
    HumanoidRootPart.CFrame = HumanoidRootPart.CFrame + (moveDirection * speed * deltaTime)
end
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then
        return
    end
    if (input.KeyCode == Enum.KeyCode.F) then
        if isButtonVisible then
            isSpeedEnabled = not isSpeedEnabled
            Button.Text = (isSpeedEnabled and "Enable speed") or "Pause Speed"
        end
    end
end)
RunService.Heartbeat:Connect(function(deltaTime)
    movePlayer(deltaTime)
end)
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
local Button = Instance.new("TextButton")
Button.Size = UDim2.new(0, 120, 0, 40)
Button.Position = UDim2.new(0.5, -60, 0.1, 0)
Button.BackgroundColor3 = Color3.new(0, 0, 0)
Button.TextColor3 = Color3.new(1, 1, 1)
Button.Text = "Speed/Stop"
Button.Font = Enum.Font.SourceSans
Button.TextSize = 20
Button.Parent = ScreenGui
Button.Active = true
Button.Draggable = true
Button.Visible = false
Button.MouseButton1Click:Connect(function()
    isSpeedEnabled = not isSpeedEnabled
    Button.Text = (isSpeedEnabled and "Speed Enabled") or "Speed Paused"
end)
local Toggle = MoreTab:CreateToggle({Name="Walk-Speed [Key:F]",CurrentValue=false,Flag="ToggleMovement",Callback=function(Value)
    isButtonVisible = Value
    Button.Visible = Value
    isSpeedEnabled = false
    Button.Text = "Pause/Speed"
end})
local Slider = MoreTab:CreateSlider({Name="How Fast?",Range={0,200},Increment=10,Suffix="Speed",CurrentValue=100,Flag="SliderSpeed",Callback=function(Value)
    speed = Value
end})
Toggle:Set(false)
Slider:Set(100)
local HttpService = game:GetService("HttpService")
local Button = AutoTab:CreateButton({Name="FPS Booster[not mine]",Callback=function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/fx2024ondiscord/roblox/refs/heads/main/SSL.%5Bfx%5D/fpsbos.lua%20(credit%20to%20strom)"))()
end})
Button:Set("FPS Booster")
local Button = MoreTab:CreateButton({Name="❄️Dupe Balls[L]❄️",Callback=function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/fx2024ondiscord/roblox/refs/heads/main/SSL.%5Bfx%5D/Duplicate%20Ball", true))()
end})
Button:Set("Dupe Balls[L]")

local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local maxJumps = 3
local jumpCount = 0
local unlimitedJumpingEnabled = false
local function onJumpRequest()
    if (unlimitedJumpingEnabled and (jumpCount < maxJumps)) then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        jumpCount = jumpCount + 1
    end
end
local function onCharacterAdded(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    jumpCount = 0
    humanoid.StateChanged:Connect(function(_, newState)
        if (newState == Enum.HumanoidStateType.Landed) then
            jumpCount = 0
        end
    end)
end
player.CharacterAdded:Connect(onCharacterAdded)
UserInputService.JumpRequest:Connect(onJumpRequest)
if player.Character then
    onCharacterAdded(player.Character)
end
local Toggle = MoreTab:CreateToggle({Name="Unlimited Jumping",CurrentValue=false,Flag="ToggleUnlimitedJumping",Callback=function(Value)
    unlimitedJumpingEnabled = Value
end})
local function applyForce(ball, force)
    if (ball and ball:FindFirstChild("VectorForce")) then
        ball.VectorForce.Force = Vector3.new(force.X, force.Y, force.Z)
    end
end














local Tab = Window:CreateTab("FX Football Control")










local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CollectionService = game:GetService("CollectionService")
local Teams = game:GetService("Teams")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local BallControl = {power=50,enabled=false,showPath=false,spinForce=1,autoAim=false,ballMode="Normal",curveStyle="None",aimbot=false,ballTeleport=false,invisibleBall=false,skyShooter=false,bigInterception=false}
local function getHasBall()
    for _, football in CollectionService:GetTagged("Football") do
        if (football:GetAttribute("NetworkOwner") == LocalPlayer.Name) then
            return football
        end
    end
    return nil
end
local function findGoal()
    local teamFolder = Teams:FindFirstChild(LocalPlayer.Team.Name)
    if teamFolder then
        local opposingTeam = ((teamFolder.Name == "Home") and Teams.Away) or Teams.Home
        local goal = opposingTeam:FindFirstChild("Goal")
        if goal then
            return goal:FindFirstChild("InterceptionHitbox") or goal:FindFirstChild("Hitbox")
        end
    end
    return nil
end
Tab:CreateSlider({Name="Power",Range={0,500},Increment=1,Suffix="Force",CurrentValue=50,Flag="Power",Callback=function(Value)
    BallControl.power = Value
end})
Tab:CreateSlider({Name="Spin",Range={0,50},Increment=0.1,Suffix="×",CurrentValue=1,Flag="Spin",Callback=function(Value)
    BallControl.spinForce = Value
end})
Tab:CreateDropdown({Name="Ball Mode (Some Work)",Options={"Normal","Knuckleball","Curved","Rocket","Floater","Teleport","Invisible","Homing","Multi(mix"},CurrentOption="Normal",Flag="BallMode",Callback=function(Value)
    BallControl.ballMode = Value
    BallControl.ballTeleport = Value == "Teleport"
    BallControl.invisibleBall = Value == "Invisible"
end})
Tab:CreateDropdown({Name="Curve Style(some work)",Options={"None","Left","Right","Top","Bottom","Zigzag","Sp","Cha"},CurrentOption="None",Flag="CurveStyle",Callback=function(Value)
    BallControl.curveStyle = Value
end})
Tab:CreateToggle({Name="Auto Aim Goal",CurrentValue=false,Flag="AutoAim",Callback=function(Value)
    BallControl.autoAim = Value
end})
Tab:CreateToggle({Name="Aimbot",CurrentValue=false,Flag="Aimbot",Callback=function(Value)
    BallControl.aimbot = Value
end})
Tab:CreateToggle({Name="*****************h",CurrentValue=false,Flag="ShowPath",Callback=function(Value)
    BallControl.showPath = Value
end})
Tab:CreateToggle({Name="Sky Shooting) (shot from the sky(enable auto score if u want))",CurrentValue=false,Flag="SkyShooter",Callback=function(Value)
    BallControl.skyShooter = Value
    if Value then
        local skyPlatform = Instance.new("Part")
        skyPlatform.Name = "SkyShooterPlatform"
        skyPlatform.Anchored = true
        skyPlatform.Size = Vector3.new(10, 1, 10)
        skyPlatform.Position = LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 100, 0)
        skyPlatform.Parent = workspace
        LocalPlayer.Character:MoveTo(skyPlatform.Position + Vector3.new(0, 3, 0))
    else
        local skyPlatform = workspace:FindFirstChild("SkyShooterPlatform")
        if skyPlatform then
            skyPlatform:Destroy()
        end
    end
end})
Tab:CreateButton({Name="Extend Goal Hitbox Size",Callback=function()
    BallControl.bigInterception = not BallControl.bigInterception
    local teamFolder = game.Players.LocalPlayer.Team
    local opposingTeam = ((teamFolder.Name == "Home") and Teams:FindFirstChild("Away")) or Teams:FindFirstChild("Home")
    local goal = opposingTeam:FindFirstChild("Goal")
    if goal then
        local hitbox = goal:FindFirstChild("Hitbox") or goal:FindFirstChild("InterceptionHitbox")
        if hitbox then
            if BallControl.bigInterception then
                hitbox.Size = Vector3.new(200, hitbox.Size.Y, hitbox.Size.Z)
            else
                hitbox.Size = Vector3.new(200, hitbox.Size.Y, hitbox.Size.Z)
            end
        end
    end
    Extend:Set(false)
end})
local function applyBallEffects()
    local ball = getHasBall()
    if not ball then
        return
    end
    if (BallControl.ballMode == "Knuckleball") then
        ball.RotVelocity = Vector3.new(math.random(-50, 50) * BallControl.spinForce, math.random(-50, 50) * BallControl.spinForce, math.random(-50, 50) * BallControl.spinForce)
    elseif (BallControl.ballMode == "Rocket") then
        ball.Velocity = ball.CFrame.LookVector * BallControl.power * 2
        local fire = Instance.new("Fire")
        fire.Parent = ball
        game:GetService("Debris"):AddItem(fire, 2)
    elseif (BallControl.ballMode == "Floater") then
        local floatForce = Instance.new("BodyVelocity")
        floatForce.Velocity = Vector3.new(0, 20, 0)
        floatForce.MaxForce = Vector3.new(0, math.huge, 0)
        floatForce.Parent = ball
        game:GetService("Debris"):AddItem(floatForce, 1)
    elseif (BallControl.ballMode == "Homing") then
        local goal = findGoal()
        if goal then
            local direction = (goal.Position - ball.Position).Unit
            ball.Velocity = direction * BallControl.power
        end
    elseif (BallControl.ballMode == "Multi-Ball") then
        for i = 1, 3 do
            local newBall = ball:Clone()
            newBall.Position = ball.Position + Vector3.new(math.random(-5, 5), math.random(-5, 5), math.random(-5, 5))
            newBall.Parent = workspace
            newBall.Velocity = Vector3.new(math.random(-50, 50), math.random(-50, 50), math.random(-50, 50))
        end
    end
    if (BallControl.curveStyle == "Zigzag") then
        ball.Velocity = ball.Velocity + Vector3.new(math.sin(time() * 10) * 10, 0, 0)
    elseif (BallControl.curveStyle == "Spiral") then
        ball.Velocity = ball.Velocity + Vector3.new(math.sin(time() * 10) * 10, math.cos(time() * 10) * 10, 0)
    elseif (BallControl.curveStyle == "Chaos") then
        ball.Velocity = ball.Velocity + Vector3.new(math.random(-20, 20), math.random(-20, 20), math.random(-20, 20))
    end
    if BallControl.invisibleBall then
        ball.Transparency = 1
    else
        ball.Transparency = 0
    end
    local fieldBounds = workspace:FindFirstChild("FieldBounds")
    if fieldBounds then
        local ballPos = ball.Position
        if (not fieldBounds:IsA("BasePart") or not fieldBounds:IsA("Model")) then
            return
        end
        local bounds = (fieldBounds:IsA("BasePart") and (fieldBounds.Size / 2)) or (fieldBounds:GetExtentsSize() / 2)
        local center = (fieldBounds:IsA("BasePart") and fieldBounds.Position) or fieldBounds:GetPivot().Position
        ball.Position = Vector3.new(math.clamp(ballPos.X, center.X - bounds.X, center.X + bounds.X), math.clamp(ballPos.Y, center.Y, center.Y + (bounds.Y * 2)), math.clamp(ballPos.Z, center.Z - bounds.Z, center.Z + bounds.Z))
    end
end
local function enhancedAimbot()
    local ball = getHasBall()
    if (ball and BallControl.aimbot) then
        local goal = findGoal()
        if goal then
            local goalPos = goal.Position
            local ballPos = ball.Position
            local direction = (goalPos - ballPos).Unit
            local force = Instance.new("BodyForce")
            force.Force = direction * BallControl.power * 10
            force.Parent = ball
            ball.Velocity = ball.Velocity + Vector3.new(math.random(-10, 10), math.random(-10, 10), math.random(-10, 10))
            if (BallControl.curveStyle == "Zigzag") then
                ball.Velocity = ball.Velocity + Vector3.new(10 * math.sin(time() * 10), 0, 0)
            elseif (BallControl.curveStyle == "Spiral") then
                ball.Velocity = ball.Velocity + Vector3.new(10 * math.sin(time() * 10), 10 * math.cos(time() * 10), 0)
            elseif (BallControl.curveStyle == "Chaos") then
                ball.Velocity = ball.Velocity + Vector3.new(math.random(-20, 20), math.random(-20, 20), math.random(-20, 20))
            end
            local fieldBounds = workspace:FindFirstChild("FieldBounds")
            if fieldBounds then
                local bounds = (fieldBounds:IsA("BasePart") and (fieldBounds.Size / 2)) or (fieldBounds:GetExtentsSize() / 2)
                local center = (fieldBounds:IsA("BasePart") and fieldBounds.Position) or fieldBounds:GetPivot().Position
                ball.Position = Vector3.new(math.clamp(ballPos.X, center.X - bounds.X, center.X + bounds.X), math.clamp(ballPos.Y, center.Y, center.Y + (bounds.Y * 2)), math.clamp(ballPos.Z, center.Z - bounds.Z, center.Z + bounds.Z))
            end
        end
    end
end
RunService.Heartbeat:Connect(function()
    if (BallControl.enabled and getHasBall()) then
        applyBallEffects()
    end
    if BallControl.showPath then
        local ball = getHasBall()
        if ball then
            local attachment0 = Instance.new("Attachment")
            attachment0.Parent = ball
            local trail = Instance.new("Trail")
            trail.Attachment0 = attachment0
            trail.Parent = ball
            trail.Lifetime = 1
            trail.Color = ColorSequence.new(Color3.fromRGB(255, 0, 0))
            trail.Transparency = NumberSequence.new(0, 1)
            game:GetService("Debris"):AddItem(attachment0, 1)
            game:GetService("Debris"):AddItem(trail, 1)
        end
    end
    enhancedAimbot()
end)
Tab:CreateButton({Name="Ball Status",Callback=function()
    local ball = getHasBall()
    if ball then
        Rayfield:Notify({Title="Ball Status",Content=("You have the ball! Position: " .. tostring(ball.Position)),Duration=2})
    else
        Rayfield:Notify({Title="Ball Status",Content="You don't have the ball",Duration=2})
    end
end})
Tab:CreateButton({Name="Locate Goal[Distance]",Callback=function()
    local goal = findGoal()
    if goal then
        Rayfield:Notify({Title="Goal Found",Content=("Distance to goal: " .. math.floor((goal.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude) .. " studs"),Duration=2})
    else
        Rayfield:Notify({Title="Goal Not Found",Content="Couldn't locate opposing team goal[go closer]",Duration=2})
    end
end})
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if (not gameProcessed and BallControl.skyShooter and (input.KeyCode == Enum.KeyCode.U)) then
        local ball = getHasBall()
        if ball then
            local goal = findGoal()
            if goal then
                local direction = (goal.Position - ball.Position).Unit
                ball.Velocity = direction * BallControl.power * 3
            end
        end
    end
end)
BallControl.enabled = true
Rayfield:Notify({Title="FX_Scripts loaded",Content="Bring it on!! Always Fx_scripts",Duration=5})



local BallFrozen = false
local frozenBallCFrame = nil
local freezeButton = nil

local function showNotification(message)
    local screenGui = LocalPlayer:FindFirstChild("PlayerGui"):FindFirstChild("ScreenGui")
    if not screenGui then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "ScreenGui"
        screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    end

    local notification = Instance.new("TextLabel")
    notification.Size = UDim2.new(0, 300, 0, 50)
    notification.Position = UDim2.new(0.5, -150, 0.1, 0)
    notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    notification.TextColor3 = Color3.fromRGB(255, 255, 255)
    notification.TextScaled = true
    notification.Text = message
    notification.Parent = screenGui

    task.delay(2, function()
        notification:Destroy()
    end)
end

local function toggleFreeze()
    BallFrozen = not BallFrozen
    if BallFrozen then
        local ball = getHasBall()
        if ball then
            frozenBallCFrame = ball.CFrame
            showNotification("Ball frozen in place")
        end
    else
        frozenBallCFrame = nil
        showNotification("Ball unfrozen")
    end
end

local function createMobileButton()
    local screenGui = LocalPlayer:FindFirstChild("PlayerGui"):FindFirstChild("ScreenGui")
    if not screenGui then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "ScreenGui"
        screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    end

    freezeButton = Instance.new("TextButton")
    freezeButton.Size = UDim2.new(0, 200, 0, 50)
    freezeButton.Position = UDim2.new(0.5, -100, 0.5, -18) 
    freezeButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    freezeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    freezeButton.TextScaled = true
    freezeButton.Text = "Freeze Ball"
    freezeButton.Parent = screenGui

    freezeButton.MouseButton1Click:Connect(function()
        toggleFreeze()
    end)

    local dragging, dragInput, startPos
    local function onInputBegan(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            startPos = freezeButton.Position
            dragInput = input
        end
    end

    local function onInputChanged(input)
        if dragging then
            local delta = input.Position - dragInput.Position
            freezeButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end

    local function onInputEnded(input)
        if input == dragInput then
            dragging = false
        end
    end

    freezeButton.InputBegan:Connect(onInputBegan)
    freezeButton.InputChanged:Connect(onInputChanged)
    freezeButton.InputEnded:Connect(onInputEnded)
end

local function removeMobileButton()
    if freezeButton then
        freezeButton:Destroy()
        freezeButton = nil
    end
end

RunService.Heartbeat:Connect(function()
    local ball = getHasBall()
    if ball then
        if BallFrozen and frozenBallCFrame then
            ball.CFrame = frozenBallCFrame
        end
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == Enum.KeyCode.B then
            toggleFreeze()
        end
    end
end)

local Toggle = Tab:CreateToggle({
    Name = "Freeze Ball [Pc:B]",
    CurrentValue = false,
    Flag = "ToggleFreezeBall",
    Callback = function(Value)
        if Value then
            createMobileButton()
        else
            removeMobileButton()
        end
    end,
})










local CollectionService = game:GetService("CollectionService")
local LocalPlayer = Players.LocalPlayer

local FxEnabled = false
local TargetMagnitude = 10

local function getHasBall()
for _, football in CollectionService:GetTagged("Football") do
    if football:GetAttribute("NetworkOwner") == LocalPlayer.Name then
        return football
    end
end
return nil
end

local function bringBallToMagnitude(ball)
if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
    local playerHRP = LocalPlayer.Character.HumanoidRootPart
    if (playerHRP.Position - ball.Position).Magnitude > TargetMagnitude then
        ball.CFrame = playerHRP.CFrame + Vector3.new(0, 2, 0)
    end
end
end

local function showNotification(message)
game.StarterGui:SetCore("SendNotification", {
    Title = "Ball Back",
    Text = message,
    Duration = 3
})
end

local Toggle = Tab:CreateToggle({
Name = "Ball Back",
CurrentValue = false,
Flag = "Toggle1",
Callback = function(Value)
    FxEnabled = Value
    if FxEnabled then
        showNotification("Ball Back Enabled")
    else
        showNotification("Ball Back Disabled")
    end
end
})

local sliderValue = TargetMagnitude
local Slider = Tab:CreateSlider({
Name = "Ball Magnitude [1-67]",
Range = {5, 50},
Increment = 1,
Suffix = "Units",
CurrentValue = TargetMagnitude,
Flag = "Slider1",
Callback = function(Value)
    sliderValue = Value
end,
ReleasedCallback = function(Value)
    TargetMagnitude = Value
    showNotification("Magnitude set to " .. Value .. "SHHHHHH")
end
})

RunService.Heartbeat:Connect(function()
if FxEnabled then
    local ball = getHasBall()
    if ball then
        bringBallToMagnitude(ball)
    end
end
end)










Tab:CreateToggle({
Name = "Auto Dribble(press Q)",
CurrentValue = false,
Flag = "AutoPressQ",
Callback = function(Value)
    _G.AutoPressQ = Value
    while _G.AutoPressQ and task.wait() do
        local function getHasBall()
            for _, football in CollectionService:GetTagged("Football") do
                if football:GetAttribute("NetworkOwner") == game.Players.LocalPlayer.Name then
                    return football
                end
            end
            return nil
        end

        local function isOtherTeamPlayerNearby()
            local character = game.Players.LocalPlayer.Character
            if not character then return false end
            local root = character:FindFirstChild("HumanoidRootPart")
            if not root then return false end
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player.Team ~= game.Players.LocalPlayer.Team then
                    local otherCharacter = player.Character
                    if otherCharacter then
                        local otherRoot = otherCharacter:FindFirstChild("HumanoidRootPart")
                        if otherRoot and (root.Position - otherRoot.Position).magnitude < 10 then
                            return true
                        end
                    end
                end
            end
            return false
        end

        local function autoPressQ()
            local football = getHasBall()
            if football and isOtherTeamPlayerNearby() then
                game:GetService("UserInputService"):InputBegan(Enum.KeyCode.Q)
            end
        end

        autoPressQ()
    end
end
})










local ClientsTab = Window:CreateTab("DISCORD MOD")

